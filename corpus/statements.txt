===
let a
===

let a

---

(document
  (statement
    (declaration_statement
      (let_declaration
        ident: (ident
          (ident_word)))))
)

===
let a = b + 1
===

let a = b + 1

---

(document
  (statement
    (declaration_statement
      (let_declaration
        ident: (ident
          (ident_word))
        value: (expression
          (binary_expression
            left: (expression
              (ident
                (ident_word)))
            right: (expression
              (number)))))))
)

===
let array
===

let cheeses = ["cheddar", "brie", "halloumi"]

---

  (document
      (statement
        (declaration_statement
          (let_declaration
            (ident
              (ident_word))
            (expression
              (array
                (expression
                  (string
                    (string_content)))
                (expression
                  (string
                    (string_content)))
                (expression
                  (string
                    (string_content)))))))))

===
let with object comprehension
===

let o = { [key]: {val} for key, val in someObject };

---

    (document
      (statement
        (declaration_statement
          (let_declaration
            (ident
              (ident_word))
            (expression
              (object
                (pairComp
                  (key
                    (ident
                      (ident_word)))
                  (expression
                    (object
                      (pair
                        (key
                          (ident
                            (ident_word))))))
                  (ident_word)
                  (ident_word)
                  (ident
                    (ident_word)))))))))

===
type with object comprehension
===

type schedule = {
    [day]: {
        tasks: getTasks()
    } for day in weekday
}

---

    (document
      (statement
        (declaration_statement
          (type_declaration
            (ident
              (ident_word))
            (object
              (pairComp
                (key
                  (ident
                    (ident_word)))
                (expression
                  (object
                    (pair
                      (key
                        (ident
                          (ident_word)))
                      (ERROR
                        (UNEXPECTED 'g'))
                      (tuple))))
                (ident_word)
                (ident
                  (ident_word))))))))

===
let object in an object
===

let x = {}
let x = { o: {}, j: {} }
let x = { x: { x: { a?, +b, -c } } }

---

 (document
      (statement
        (declaration_statement
          (let_declaration
            (ident
              (ident_word))
            (expression
              (object)))))
      (statement
        (declaration_statement
          (let_declaration
            (ident
              (ident_word))
            (expression
              (object
                (pair
                  (key
                    (ident
                      (ident_word)))
                  (object))
                (pair
                  (key
                    (ident
                      (ident_word)))
                  (object)))))))
      (statement
        (declaration_statement
          (let_declaration
            (ident
              (ident_word))
            (expression
            (object
              (pair
                (key
                  (ident
                    (ident_word)))
                (object
                  (pair
                    (key
                      (ident
                        (ident_word)))
                    (object
                      (pair
                        (key
                          (ident
                            (ident_word))))
                      (pair
                        (key
                          (ident
                            (ident_word))))
                      (pair
                        (key
                          (ident
                            (ident_word))))))))))))))

===
let with comprehension to key
===

let y = {
  a: { [key]: {val} for key, val in someObject }
}

---

  (document
      (statement
        (declaration_statement
          (let_declaration
            (ident
              (ident_word))
            (expression
              (object
                (pair
                  (key
                    (ident
                      (ident_word)))
                  (object
                    (pairComp
                      (key
                        (ident
                          (ident_word)))
                      (expression
                        (object
                          (pair
                            (key
                              (ident
                                (ident_word))))))
                      (ident_word)
                      (ident_word)
                      (ident
                        (ident_word)))))))))))

===
let with comprehension spread
===

let y = { ...{ [key]: val for key, val in someObject } }

---

 (document
      (statement
        (declaration_statement
          (let_declaration
            (ident
              (ident_word))
            (expression
              (object
                (spread
                  (expression
                    (object
                      (pairComp
                        (key
                          (ident
                            (ident_word)))
                        (expression
                          (ident
                            (ident_word)))
                        (ident_word)
                        (ident_word)
                        (ident
                          (ident_word)))))))))))
)

===
let with array comprehension
===

let a = [x for x in list]

---

(document
  (statement
    (declaration_statement
    (let_declaration
      ident: (ident
        (ident_word))
      value: (expression
        (arrayComp
          value: (expression
            (ident
              (ident_word)))
            valueAs: (ident_word)
            in: (expression
              (ident
                (ident_word)))))
      )
    )
  )
)

===
let expression with array comprehension
===

let a = [x + 1 + 1 for x in list]

---

(document
  (statement
    (declaration_statement
    (let_declaration
      ident: (ident
        (ident_word))
      value: (expression
                (arrayComp
                  value: (expression
                    (binary_expression
                      left: (expression
                        (binary_expression
                          left: (expression
                            (ident
                              (ident_word)))
                          right: (expression
                            (number))))
                      right: (expression
                        (number))))
                  valueAs: (ident_word)
                  in: (expression
                    (ident
                      (ident_word))))))
    )
  )
)

===
array comp with proper key
===

let names = [i for i in range(10)]

---

(document
  (statement
    (declaration_statement
      (let_declaration
        ident: (ident
          (ident_word))
        value: (expression
          (arrayComp
            value: (expression
              (ident
                (ident_word)))
            valueAs: (ident_word)
              in: (expression
                (call_expression
                  (ident
                    (ident_word))
                  (tuple
                    (expression
                      (number)))))))))))


===
array comp with string key
===

let names = ["foo" for i in range(10)]

---

(document
  (statement
    (declaration_statement
      (let_declaration
        (ident
          (ident_word))
        (expression
          (arrayComp
            (expression
              (string
                (string_content)))
            (ident_word)
            (expression
              (call_expression
                (ident
                  (ident_word))
                (tuple
                  (expression
                    (number)))))))))))

===
array comp with template string key
===

let names = [`abc${i}def` for i in range(10)]

---

(document
  (statement
    (declaration_statement
      (let_declaration
        (ident
          (ident_word))
        (expression
          (arrayComp
            (expression
              (template_string
                (template_substitution
                  (expression
                    (ident
                      (ident_word))))))
            (ident_word)
            (expression
              (call_expression
                (ident
                  (ident_word))
                (tuple
                  (expression
                    (number)))))))))))

===
add two objects together
===

{} + {}

---

(document
  (statement
    (expression
    (binary_expression
      (expression
        (object))
      (expression
        (object))))))

===
let a = object plus object
===

let a = {} + {} + ({} + {})

---
(document
  (statement
    (declaration_statement
      (let_declaration
        (ident
          (ident_word))
        (expression
          (binary_expression
            (expression
              (binary_expression
                (expression
                  (object))
                (expression
                  (object))))
            (expression
              (tuple
                (expression
                  (binary_expression
                    (expression
                      (object))
                    (expression
                      (object))))))))))))

===
import some things
===

import pipeline, job from "gitlab-ci.mtsd"

---

(document
  (statement
    (declaration_statement
      (import_declaration
        (ident_word)
        (ident_word)
        (string
          (string_content))))))

===
declare an element
===

job unit_test = {
  script: "
    npm ci
    npm run test
  "
}

job npm_build = {
    script: "npm run build"
}

job npm_publish = {
    script: "npm publish",
    release
}

---

(document
  (statement
    (declaration_statement
      (let_element_declaration
        (ident_word)
        (ident_word)
        (expression
          (object
            (pair
              (key
                (ident
                  (ident_word)))
              (string
              (string_content))))))))
      (statement
        (declaration_statement
          (let_element_declaration
            (ident_word)
            (ident_word)
            (expression
              (object
                (pair
                  (key
                    (ident
                      (ident_word)))
                  (string
                    (string_content))))))))
      (statement
        (declaration_statement
          (let_element_declaration
            (ident_word)
            (ident_word)
            (expression
              (object
                (pair
                  (key
                    (ident
                      (ident_word)))
                  (string
                    (string_content)))
                (pair
                  (key
                    (ident
                      (ident_word))))))))))

===
declare an element sloppy
===

pipeline main = {
    testing: {
        unit_test
    },
    building: {
        npm_build
    },
    publishing: {
        npm_publish
    },
}

---

(document
  (statement
    (declaration_statement
      (let_element_declaration
        (ident_word)
        (ident_word)
        (expression
          (object
            (pair
              (key
                (ident
                  (ident_word)))
              (object
                (pair
                  (key
                    (ident
                      (ident_word))))))
            (pair
              (key
                (ident
                  (ident_word)))
              (object
                (pair
                  (key
                    (ident
                      (ident_word))))))
            (pair
              (key
                (ident
                  (ident_word)))
              (object
                (pair
                  (key
                    (ident
                      (ident_word))))))))))))